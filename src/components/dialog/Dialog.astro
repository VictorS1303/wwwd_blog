---
import Header from "../header/Header.astro"
import TextBlock from "../text_block/TextBlock.astro"
import Button from "../button/Button.astro"
import CloseDialogButton from "../button/CloseDialogButton.astro"

const {
  class: className,
  id,
  headerText,
  textBlockParagraphText,
  type, // "login" | "share" | "download" | "warning"
  dialogButtons = [], // single prop
  href,
} = Astro.props

let dialogType = type || "default"
---

<dialog
  class={`${className} fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 h-fit w-[80vw] max-w-[450px] rounded-md text-center
          transition-all duration-400 ease-in open:backdrop-blur-3xl`}
  id={id}
>
  <div class="flex flex-col w-full p-4">
    <!-- Global close button for every modal except warning -->
    {dialogType !== "warning" && <CloseDialogButton />}

    {
      dialogType === "login" && (
        <div class="mt-4">
          <Header class="text-2xl font-bold" headerText={headerText} />
          <TextBlock textBlockParagraphText={textBlockParagraphText} />
          <div class="mt-8 mb-4 space-x-4 flex justify-center flex-wrap">
            {dialogButtons.map((btn) => (
              <Button
                id={btn.id}
                href={btn.href}
                buttonText={btn.buttonText}
                isConfirmButton={true}
                class={`${btn.class} bg-[var(--secondary-text-color)] text-white px-4 py-2 text-xl rounded-md transition-opacity duration-150 ease-in hover:opacity-90`}
              />
            ))}
          </div>
        </div>
      )
    }

    {
      dialogType === "share" && (
        <div class="mt-8 grid place-content-center mx-auto">
          <Header class="text-2xl font-bold" headerText={headerText} />
          <TextBlock textBlockParagraphText={textBlockParagraphText} />
          <div class="mt-4">
            <slot />
          </div>
        </div>
      )
    }

    {
      dialogType === "download" && (
        <div class="mt-8 flex flex-col items-center">
          <Header headerText={headerText} />
          <TextBlock textBlockParagraphText={textBlockParagraphText} />
          <div class="mt-4">
            <slot />
          </div>
        </div>
      )
    }

    {
      dialogType === "warning" && (
        <div class="flex flex-col items-center">
          <Header headerText={headerText} />
          <TextBlock textBlockParagraphText={textBlockParagraphText} />
          <div class="mt-8 flex justify-center gap-4 flex-wrap">
            {dialogButtons.map((btn) => (
              <Button
                id={btn.id}
                data-post-id={btn.dataPostId}
                buttonText={btn.buttonText}
                isConfirmButton={btn.isConfirmButton}
                href={btn.href}
                class={`${btn.class} px-4 py-2 text-lg rounded-md text-white bg-[var(--secondary-text-color)] hover:opacity-85 transition-opacity`}
              />
            ))}
            <div class="mt-4">
              <slot />
            </div>
          </div>
        </div>
      )
    }

    {
      dialogType === "default" && (
        <div class="mt-8 flex flex-col items-center">
          <Header headerText={headerText} />
          <TextBlock textBlockParagraphText={textBlockParagraphText} />
          <div class="mt-4">
            <slot />
          </div>
        </div>
      )
    }
  </div>
</dialog>

<style>
  dialog {
    padding: 0;
    border: none;
    margin: 0;
  }

  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(4px);
  }
</style>

<script>
  const dialog = document.querySelector("dialog")

  // Close button logic
  document.querySelectorAll(".close-dialog-btn").forEach((btn) => {
    btn.addEventListener("click", (e) => {
      e.stopPropagation()
      const dialog = e.currentTarget.closest("dialog")
      dialog?.close()
    })
  })

  // Prevent modal closing on escape on dashboard route
  window.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && location.pathname.endsWith("/dashboard")) {
      dialog?.classList.add("dashboard-modal-backdrop-filter")
      e.preventDefault()
    }
  })
</script>
