---
import Section from "./Section.astro"
import Header from "../../header/Header.astro"
import Dialog from "../../dialog/Dialog.astro"

const dislikePostDialogButtons = [
  {
    id: "delete_post_btn",
    buttonText: "Yes",
    isConfirmButton: true,
  },
  {
    id: "cancel_post_deletion_btn",
    buttonText: "No",
    isConfirmButton: true,
  },
]

const unsavePostDialogButtons = [
  {
    id: "unsave_post_btn",
    buttonText: "Yes",
    isConfirmButton: true,
  },
  {
    className: "cancel-btn",
    id: "cancel_post_unsaving_btn",
    buttonText: "No",
    isConfirmButton: true,
  },
]
---

<Dialog
  id="dislike_post_modal"
  headerText="DELETE POST"
  type="warning"
  textBlockParagraphText="Are you sure you want to delete this post? It cannot be undone."
  dialogButtons={dislikePostDialogButtons}
/>

<Dialog
  id="unsave_post_modal"
  headerText="UNSAVE POST"
  type="warning"
  textBlockParagraphText="Are you sure you want to unsave this post? It cannot be undone."
  dialogButtons={unsavePostDialogButtons}
/>

<div class="sections-container">
  <Section id="liked_posts" class="mb-8">
    <Header isDashboardHeader={true} headerText="Liked Posts" />
    <div
      class="liked-cards-container dashboard-cards-container flex flex-col justify-start gap-8 md:flex-row"
      id="liked_posts_container"
    >
    </div>
  </Section>

  <Section id="saved_posts">
    <Header isDashboardHeader={true} headerText="Saved Posts" />
    <div
      class="saved-cards-container dashboard-cards-container flex flex-col justify-start gap-8 md:flex-row"
      id="saved_posts_container"
    >
    </div>
  </Section>
</div>

<script>
  import {
    fetchLikedPosts,
    fetchSavedPosts,
    dislikePost,
    unsavePost,
  } from "../../../../js/utils/supabase_methods"

  import { supabaseClient } from "../../../../js/supabase/supabase_client"

  const likedPostsContainer = document.querySelector("#liked_posts_container")
  const savedPostsContainer = document.querySelector("#saved_posts_container")
  const dislikePostModal = document.querySelector("#dislike_post_modal")
  const unsavePostModal = document.querySelector("#unsave_post_modal")
  const unsavePostButton = document.querySelector("#unsave_post_btn")
  const cancelUnsavePostButton = document.querySelector(
    "#cancel_post_unsaving_btn",
  )
  const deletePostButton = document.querySelector("#delete_post_btn")
  const cancelDeleteButton = document.querySelector("#cancel_post_deletion_btn")
  const sectionsContainer = document.querySelector(".sections-container")

  // Modal Button Handlers
  deletePostButton?.addEventListener("click", removeLikedPostFromDashboard)
  unsavePostButton?.addEventListener("click", removeSavedPostFromDashboard)

  async function removeLikedPostFromDashboard() {
    const likedPostId = deletePostButton?.dataset?.dashboardPostId
    if (!likedPostId) {
      return
    }

    await dislikePost(likedPostId)
    location.reload()
    dislikePostModal?.close()
  }

  async function removeSavedPostFromDashboard() {
    const savedPostId = unsavePostButton.dataset.dashboardPostId
    if (!savedPostId) {
      return
    }
    await unsavePost(savedPostId)
    unsavePostModal?.close()
    location.reload()
  }

  cancelDeleteButton?.addEventListener("click", () => {
    dislikePostModal?.close()
  })

  cancelUnsavePostButton?.addEventListener("click", () => {
    unsavePostModal?.close()
  })

  // --- Card button delegation ---
  sectionsContainer?.addEventListener("click", async (e) => {
    const button = e.target.closest("button")
    if (!button) return

    const dashboardPostId = button.dataset.dashboardPostId

    if (button.querySelector(".fa-heart-broken")) {
      // Liked posts → open delete modal
      deletePostButton?.setAttribute("data-dashboard-post-id", dashboardPostId)
      dislikePostModal?.showModal()
    } else if (button.querySelector(".fa-trash-alt")) {
      // Saved posts → open unsave modal
      unsavePostButton?.setAttribute("data-dashboard-post-id", dashboardPostId)
      unsavePostModal?.showModal()
    }

    const existingLike = likedPosts.find((post) => post.id === dashboardPostId)
    if (existingLike) {
      console.log("User already liked this post")
      // Optionally show a modal instead of console.log
      // alreadyLikedModal?.showModal()
      return
    }
  })

  // --- Fetch Posts from Supabase ---
  const likedPosts = await fetchLikedPosts()
  const savedPosts = await fetchSavedPosts()

  // --- Card Template Creation ---
  function createCardTemplate(
    container,
    classes,
    actionButton,
    overlay,
    image,
    link,
  ) {
    const postCard = document.createElement("article")
    postCard.className = classes
    postCard.append(image, overlay, link, actionButton)
    container?.appendChild(postCard)
  }

  function createActionButton(type = "like") {
    const button = document.createElement("button")
    button.className =
      "absolute z-20 bg-white flex items-center justify-center rounded-full right-2 top-2 group w-10 h-10 cursor-pointer"

    if (type === "like") {
      const heart = document.createElement("i")
      heart.className =
        "fas fa-heart-broken text-2xl text-[var(--secondary-text-color)]"
      button.appendChild(heart)
    } else if (type === "save") {
      const bookmark = document.createElement("i")
      bookmark.className =
        "fas fa-trash-alt text-2xl text-[var(--secondary-text-color)]"
      button.appendChild(bookmark)
    }

    return button
  }

  function createOverlay() {
    const overlay = document.createElement("div")
    overlay.className =
      "rounded-md absolute top-0 left-0 w-full h-full bg-black opacity-30"
    return overlay
  }

  function createImage(post) {
    const img = document.createElement("img")
    img.className = "absolute top-0 left-0 w-full h-full object-cover"
    img.src = `${post.blog_posts.post_image}.webp`
    return img
  }

  function createHeading(title) {
    const header = document.createElement("header")
    header.className =
      "absolute bottom-0 left-0 w-full p-2 text-2xl text-center font-bold line-clamp-1 text-white"
    header.textContent = title
    return header
  }

  function createLink(href, child) {
    const link = document.createElement("a")
    link.href = href
    link.target = "_blank"
    link.className =
      "cursor-pointer group hover:text-[var(--secondary-text-color)]"
    link.appendChild(child)
    return link
  }

  function createLikedPostCard(post) {
    const button = createActionButton("like")

    button.dataset.dashboardPostId = post.id

    const overlay = createOverlay()
    const img = createImage(post)
    const heading = createHeading(post.blog_posts.post_title)
    const link = createLink(`/blog-posts/${post.blog_posts.post_slug}`, heading)

    createCardTemplate(
      likedPostsContainer,
      "post-card relative w-[225px] h-[250px] overflow-hidden rounded-md group",
      button,
      overlay,
      img,
      link,
    )
  }

  function createSavedPostCard(post) {
    const button = createActionButton("save")
    button.dataset.dashboardPostId = post.id
    const overlay = createOverlay()
    const img = createImage(post)
    const heading = createHeading(post.blog_posts.post_title)
    const link = createLink(`/blog-posts/${post.blog_posts.post_slug}`, heading)

    createCardTemplate(
      savedPostsContainer,
      "post-card relative w-[225px] h-[250px] overflow-hidden rounded-md group",
      button,
      overlay,
      img,
      link,
    )
  }

  // Show "No posts" message
  function showNoPostsMessage(container, posts, noPostsMessageText) {
    if (!posts || posts.length <= 0) {
      const noPostsMessage = document.createElement("p")
      noPostsMessage.textContent = noPostsMessageText
      noPostsMessage.classList.add(
        "text-[var(--secondary-text-color)]",
        "text-xl",
      )

      container.appendChild(noPostsMessage)
    }
  }

  // Render cards
  likedPosts.forEach(createLikedPostCard)
  savedPosts.forEach(createSavedPostCard)

  // Render No Posts Messages
  showNoPostsMessage(likedPostsContainer, likedPosts, "No liked posts")
  showNoPostsMessage(savedPostsContainer, savedPosts, "No saved posts")
</script>
