---
const { src, alt, isDashboardHeader } = Astro.props

import Section from "./Section.astro"
import Image from "../../imags/Image.astro"
import Header from "../../header/Header.astro"
import ControlButtonsContainer from "../../containers/ControlButtonsContainer.astro"
import { supabaseClient } from "../../../../js/supabase/supabase_client"

const {
  data: { user },
} = await supabaseClient.auth.getUser()

const avatarUrl = user?.user_metadata?.avatar_url

const controlButtons = [
  {
    buttonText: "Edit profile",
    id: "edit_profile_button",
    class: "edit-profile-button",
    isDashboardControlButton: true,
  },
  {
    buttonText: "Log out",
    class: "log-out-button",
    id: "log_out_button",
    isDashboardControlButton: true,
  },
]
---

<Section class="hero">
  <div class="flex flex-col md:flex-row md:items-start md:gap-6">
    <!-- Avatar Image -->
    <div id="avatar-container" class="flex-shrink-0 mb-4 md:mb-0">
      {
        avatarUrl && (
          <img
            src={avatarUrl}
            alt="User avatar"
            class="h-[175px] w-[175px] object-cover rounded-md"
          />
        )
      }
    </div>

    <!-- Header + Buttons -->
    <div class="flex flex-col items-start text-center md:text-left">
      <Header
        id="dashboard_header"
        class="text-2xl font-semibold mb-2"
        isDashboardHeader={isDashboardHeader}
      />
      <ControlButtonsContainer class="mt-2" buttons={controlButtons} />
    </div>
  </div>
</Section>

<script>
  import { supabaseClient } from "../../../../js/supabase/supabase_client"
  import { logOutUser } from "../../../../js/utils/supabase_methods"
  import { updateProfile } from "../../../../js/utils/supabase_methods"

  const postsWrapper = document.getElementById("dashboard-posts-wrapper")
  const lockWrapper = document.getElementById("dashboard-lock-wrapper")
  const dashboardLockModal = document.querySelector("#dashboard_lock_modal")
  const dashboardControlsContainer = document.querySelector(
    ".dashboard-controls-container",
  )

  const confirmLogoutModal = document.querySelector("#confirm_logout_modal")
  const failedUpdateModal = document.querySelector("#failed_update_modal")

  const updateProfileForm = document.querySelector("#update_profile_form")
  const updateProfileDialog = document.querySelector("#update_profile_dialog")
  const succssfulUpdateModal = document.querySelector(
    "#successful_update_modal",
  )

  confirmLogoutModal?.addEventListener("click", (e) => determineLogOutAction(e))

  // Dashboard actions
  dashboardControlsContainer?.addEventListener("click", (e) =>
    determineDashboardAction(e),
  )

  function determineDashboardAction(e) {
    if (e.target.classList.contains("log-out-button")) {
      confirmLogoutModal?.showModal()
    }
    if (e.target.classList.contains("edit-profile-button")) {
      updateProfileDialog?.showModal()
    }
  }

  // Determine log out action
  function determineLogOutAction(e) {
    if (e.target.classList.contains("confirm-logout-btn")) {
      logOutUser()
    }
    if (e.target.classList.contains("stay-logged-in-btn")) {
      confirmLogoutModal?.close()
    }
  }

  // Show/hide dashboard depending on auth and populate hero section
  async function initDashboard() {
    const {
      data: { user },
    } = await supabaseClient.auth.getUser()

    if (user) {
      postsWrapper.style.display = "block"
      lockWrapper.style.display = "none" // hide lock wrapper

      // Update dashboard hero
      const heroImg = document.querySelector(".dashboard-hero-image")
      const heroName = document.querySelector(".dashboard-hero-name")
      if (heroImg)
        heroImg.src =
          user.user_metadata.avatar_url ||
          "/images/landing_hero/landing_hero_bg.webp"
      if (heroName) heroName.textContent = user.user_metadata.username || "User"

      // Set title
      document.title = `Welcome, ${user.user_metadata.username || "User"}!`
    } else {
      lockWrapper.style.display = "block"
      postsWrapper.style.display = "none"
    }
  }

  // Call it after page load
  window.addEventListener("DOMContentLoaded", initDashboard)

  // Form submission â€” updated version
  updateProfileForm?.addEventListener("submit", async (e) => {
    e.preventDefault()
    const formData = new FormData(updateProfileForm)
    const updatedUsername = formData.get("updated_username")
    const updatedPassword = formData.get("updated_password")

    // Call your existing updateProfile function
    const updateResult = await updateProfile(updatedUsername, updatedPassword)

    if (updateResult.success) {
      updateProfileDialog?.close()
      succssfulUpdateModal?.showModal()

      setTimeout(() => {
        location.reload() // fixed typo here
      }, 2000)
    } else {
      failedUpdateModal?.showModal()
    }
  })

  document
    .querySelector(".edit-profile-button")
    ?.addEventListener("click", () => {
      updateProfileForm.reset() // Clear inputs
      updateProfileDialog?.showModal()
    })
</script>
